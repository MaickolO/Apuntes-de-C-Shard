<Window x:Class="C24_WPF_GRID.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:C24_WPF_GRID"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">

    <Grid>
        <!-- Es el contenedor WPF más versatil
        Consiste en dividir el contenedor en columnas y filas
        Cada columna y fila pueden tener diversos valores de tamaños
        (absoluto (píxeles), automáticos (se adapta al tamaño de su interior), 
        proporcional (ocupa lo que queda de su contenedor)) -->
        
        <!-- ColumnDefinition y RowDefinition definen cuantas columas y filas tendrá la interfaz respectivamente. -->
        <!-- Width="175" -> Usa tamaño absoluto (175 píxeles) -->
        <!-- Width="*" -> Usa valor proporcional (ocupa lo que queda de espacio)
            Si hay dos o más columnas con valores proporcionales se adaptan equitativamente 
            para ocupar todo el espacio
            Se puede usar multiplicadores para similar porcentajes (grid1:*, grid2:2*) -->
        <!-- Width="auto" -> Usa valor automático (Se adapta al tamaño de su contenido) -->
        
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="175"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
            <ColumnDefinition Width="auto"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="2*"></RowDefinition>
            <RowDefinition Height="3*"></RowDefinition>
            <RowDefinition Height="60"></RowDefinition>
            <RowDefinition Height="80"></RowDefinition>
        </Grid.RowDefinitions>
        
        <!-- Grid.Column: indica a que columna pertenece (empieza desde 0) -->
        <!-- Grid.Row: indica a que fila pertenece (empieza desde 0) -->
        <!-- Cuando no se especifica la columna o fila se toma a la primera -->
        <Button Grid.Column="0">Btn1</Button>
        <Button Grid.Column="1" Grid.Row="1">Btn2</Button>
        <!-- Como el btn no tiene tamaño asignado, el grid en auto toma el tamaño de su texto -->
        <Button Grid.Column="2" Grid.Row="2">Btn3</Button>
        <!-- ColumnSpan y RowSpan permiten combinar las columnas o filas respectivamente-->
        <TextBlock Grid.ColumnSpan="3" Grid.Row="3" HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   FontSize="30">TEXTO EN COLUMNAS COMBINADAS</TextBlock>
        
        <!-- GRIDS ANIDADOS-->
        <Grid Grid.Column="0" Grid.Row="4">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>

            <Button Grid.Column="0" Grid.Row="0">a1</Button>
            <Button Grid.Column="1" Grid.Row="0">a2</Button>
            <Button Grid.Column="0" Grid.Row="1">b1</Button>
            <Button Grid.Column="1" Grid.Row="1">b2</Button>

        </Grid>
        
        
    </Grid>
</Window>